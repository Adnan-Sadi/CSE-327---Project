name: 'PhotoController class'
description: |-

  The methods inside this class are used for uploading or 
  viewing a single photo on this web application.
endpoints:
  -
    httpMethods:
      - GET
    uri: 'photo/{photoId}'
    metadata:
      title: 'index(): Display the view of an individual photo.'
      description: |-
        This method takes the parameter '$photoId' from the route url.
        The '$photoId' is used to find the particular photo with the same photoId from the database.
        All the data about that photo is stored inside a laravel 'Collection Object'.<br>
        Finally, the function returns a view of the 'photopage' along with the 'Collection Object'
        which contains the photo data.
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      photoId:
        name: photoId
        description: 'The ID of the photo'
        required: true
        example: 13
        type: integer
        custom: []
    queryParameters: []
    bodyParameters: []
    responses:
      -
        status: 200
        content: |-
          {
           "p_id": 4,
           "u_id": 2,
           "caption": "This is an example caption",
           "photo_path": "example-photo.jpg",
           "created_at": "2021-12-22 08:58:02",
           "updated_at": "2021-12-22 08:58:0",
          }
        headers: []
        description: '200'
    responseFields: []
  -
    httpMethods:
      - POST
    uri: photo-upload
    metadata:
      title: 'photoUpload(): Store a newly uplaoded photo in database.'
      description: |-
        This method takes a form request parameter '$request' as a method parameter.
        The '$request' parameter contains two parameters which contains the values that were submitted with
        the 'photo upload form' and these two parameters are 'caption' and 'photo'.<br>
        Here, the method validates the form data received from the '$request' variable and returns error messages
        if the request fails to validate.
        The uploaded image file is given a new name and stored in the storage.<br>
        Next, the method stores the necesary informations about the photo in the database by creating a
        new row in the 'photos' table within the database.<br>
        Finally, it redirects the user to the page of the photo that was uploaded.
      authenticated: false
      custom: []
    headers:
      Content-Type: multipart/form-data
      Accept: application/json
    urlParameters: []
    queryParameters: []
    bodyParameters:
      caption:
        name: caption
        description: 'The caption of the photo.'
        required: false
        example: aut
        type: string
        custom: []
      photo:
        name: photo
        description: 'The uploaded image file'
        required: true
        example: null
        type: file
        custom: []
    responses:
      -
        status: 200
        content: '{ return \Illuminate\View\View }'
        headers: []
        description: '200, success'
      -
        status: 200
        content: '{ form data failed to validate }'
        headers: []
        description: '200, failure'
    responseFields: []
  -
    httpMethods:
      - GET
    uri: photo-upload-page
    metadata:
      title: 'photoUploadPage(): Display the view of the photo upload page.'
      description: |-
        This method returns the view of the photo upload page where the users can
        upload photos.
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    queryParameters: []
    bodyParameters: []
    responses:
      -
        status: 200
        content: '{ return \Illuminate\View\View }'
        headers: []
        description: '200'
    responseFields: []
  -
    httpMethods:
      - DELETE
    uri: 'photo-delete/{photoId}'
    metadata:
      title: 'photoDelete(): Deletes a photo from Database.'
      description: |-
        This methods the parameter '$photoId' from the url, which is the
        photo id of the photo the user requested to delete.<br>
        Using this photo id the function finds the photo from the database
        and deletes all the information related to the photo from the database. It
        also deletes the photo from the storage as well.<br>
        Finally, the function redirects the user to the view of the newsfeed page.
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      photoId:
        name: photoId
        description: 'The ID of the photo'
        required: true
        example: 10
        type: integer
        custom: []
    queryParameters: []
    bodyParameters: []
    responses:
      -
        status: 200
        content: '{ return \Illuminate\View\View }'
        headers: []
        description: '200, success'
    responseFields: []
